name: DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - run: cd terraform && terraform init
    - if: github.event_name == 'pull_request'
      run: cd terraform && terraform plan -var="github_token=${{ secrets.GITHUB_TOKEN }}"
    - if: github.ref == 'refs/heads/main'
      run: cd terraform && terraform apply -auto-approve -var="github_token=${{ secrets.GITHUB_TOKEN }}"

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: terraform
    runs-on: ubuntu-latest
    steps:
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - run: |
        aws ecs update-service --cluster devops-pipeline-cluster --service devops-pipeline-service --force-new-deployment --region ${{ env.AWS_REGION }} || echo "ECS update failed"
        aws codepipeline start-pipeline-execution --name devops-pipeline --region ${{ env.AWS_REGION }} || echo "Pipeline trigger failed"
        echo "âœ… Deployment completed"
