name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to ECS
      run: |
        echo "üöÄ Deploying to ECS..."
        
        # Update ECS service
        if aws ecs describe-services --cluster devops-pipeline-cluster --services devops-pipeline-service --region ${{ env.AWS_REGION }} --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
          echo "‚úÖ Updating ECS service..."
          aws ecs update-service --cluster devops-pipeline-cluster --service devops-pipeline-service --force-new-deployment --region ${{ env.AWS_REGION }}
        else
          echo "‚ö†Ô∏è ECS service not found"
        fi
        
        # Trigger CodePipeline
        if aws codepipeline get-pipeline --name devops-pipeline --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          echo "‚úÖ Triggering CodePipeline..."
          aws codepipeline start-pipeline-execution --name devops-pipeline --region ${{ env.AWS_REGION }}
        fi

    - name: Get Application URL
      run: |
        echo "üåê Getting application URL..."
        LB_DNS=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName, `devops-pipeline`)].DNSName' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "")
        
        if [ -n "$LB_DNS" ] && [ "$LB_DNS" != "None" ]; then
          echo "‚úÖ Application URL: http://$LB_DNS"
        else
          echo "‚ö†Ô∏è Load balancer not found"
        fi
